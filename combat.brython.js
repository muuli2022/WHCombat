__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1641056262882, "combat": [".py", "from browser import document,bind\nfrom browser.html import P,BR,B\nfrom dataclasses import dataclass\n\nimport random\nimport combatfunctions as cf\n\n@dataclass\nclass Opponent:\n name:str=\"dummy\"\n WS:int=80\n S:int=4\n T:int=3\n W:int=7\n I:int=40\n A:int=2\n \n def throwDamage(self):\n  a=random.randint(1,6)\n  \n  if a ==6:\n   return self.extraDamage()\n  else :\n   return a+self.S\n   \n def extraDamage(self):\n  damage=6\n  \n  if random.randint(1,100)<self.WS:\n  \n   docOutput(\"Extra damage!\",\"bold\")\n   roll=random.randint(1,6)\n   while roll ==6:\n    docOutput(\"More extra damage\",\"bold\")\n    damage +=6\n    roll=random.randint(1,6)\n    \n   damage +=roll\n   \n  return damage+self.S\n  \n  \n  \n  \n  \n  \n@bind(document[\"set_attributes\"],\"click\")\ndef setAttributes(ev):\n\n setAttributesOf(attacker,\"a\")\n setAttributesOf(defender,\"d\")\n \n docOutput(\"Attributes set\")\n \n \ndef docOutput(string,styling=None ):\n\n if styling ==\"bold\":\n  document[\"output\"]<=B(string)\n  document[\"output\"]<=BR()\n else :\n  document[\"output\"]<=(string)\n  document[\"output\"]<=BR()\n  \n  \ndef setAttributesOf(opponent,suffix):\n opponent.name=document['n_'+suffix].value\n opponent.WS=int(document['ws_'+suffix].value)\n opponent.S=int(document['s_'+suffix].value)\n opponent.T=int(document['t_'+suffix].value)\n opponent.W=int(document['w_'+suffix].value)\n opponent.I=int(document['i_'+suffix].value)\n opponent.A=int(document['a_'+suffix].value)\n \ndef runCombatRound(att_inits,def_inits,attacks):\n i=0\n ai=0\n di=0\n \n message=\"\"\n \n while i <attacks:\n \n  if att_inits[ai]>def_inits[di]:\n  \n   message=attacker.name+\" hits on initative \"+str(att_inits[ai])\n   docOutput(message)\n   \n   ai +=1\n   \n   hit=random.randint(1,100)\n   \n   message=attacker.name+\" threw \"+str(hit)\n   docOutput(message)\n   \n   if hit <=attacker.WS:\n   \n    message=attacker.name+\" hits \"+str(cf.findHitLocation(hit))\n    docOutput(message)\n    damage=attacker.throwDamage()\n    \n    outcome=cf.findHitOutcome(damage,defender.T)\n    \n    message=attacker.name+\" did \"+str(damage)+\" points damage and \"+defender.name+\" lost \"+str(outcome)+\" wounds\"\n    docOutput(message)\n    defender.W -=outcome\n    \n    if defender.W <0:\n     return defender.name+\" has \"+str(defender.W)+\" wounds.Throw a critical!\"\n    else :\n     message=defender.name+\" has \"+str(defender.W)+\" wounds left.\"\n     docOutput(message)\n     \n   else :\n   \n    if cf.checkFumble(hit)==\"Miss!\":\n     docOutput(\"Miss!\")\n    else :\n     message=attacker.name+\"fumbled with roll \"+str(hit)+\". Loose one attack.\"\n     docOutput(message,\"bold\")\n     if ai <len(att_inits)-1:\n      ai +=1\n      attacks -=1\n  else :\n   message=defender.name+\" hits on initative \"+str(def_inits[di])\n   docOutput(message)\n   \n   di +=1\n   \n   hit=random.randint(1,100)\n   \n   message=defender.name+\" threw \"+str(hit)\n   docOutput(message)\n   \n   if hit <=defender.WS:\n   \n    message=defender.name+\" hits \"+str(cf.findHitLocation(hit))\n    docOutput(message)\n    damage=defender.throwDamage()\n    \n    outcome=cf.findHitOutcome(damage,attacker.T)\n    \n    message=defender.name+\" did \"+str(damage)+\" points damage and \"+attacker.name+\" lost \"+str(outcome)+\" wounds\"\n    docOutput(message)\n    attacker.W -=outcome\n    \n    if attacker.W <0:\n     return attacker.name+\" has \"+str(attacker.W)+\" wounds.Throw a critical!\"\n    else :\n     message=attacker.name+\" has \"+str(attacker.W)+\" wounds left.\"\n     docOutput(message)\n     \n   else :\n   \n    if cf.checkFumble(hit)==\"Miss!\":\n     docOutput(\"Miss!\")\n    else :\n     message=defender.name+\" fumbled with roll \"+str(hit)+\". Loose one attack.\"\n     docOutput(message)\n     if di <len(def_inits)-1:\n      di +=1\n      attacks -=1\n      \n  i +=1\n  \n return \"Attacks done\"\n \n@bind(document[\"round\"],\"click\")\ndef round(ev):\n\n defender_initiatives=cf.calculateInitiatives(defender.I,defender.A)\n attacker_initiatives=cf.calculateInitiatives(attacker.I,attacker.A)\n \n i=0\n all_attacks=attacker.A+defender.A\n \n \n \n defender_initiatives.append(0)\n attacker_initiatives.append(0)\n \n document[\"output\"]<=P(B(runCombatRound(attacker_initiatives,defender_initiatives,all_attacks)))\n \n \n document[\"output\"].scrollTop=document[\"output\"].scrollHeight\n \n \n \n \ndefender=Opponent()\n\nattacker=Opponent()\n\n\n\n", ["browser", "browser.html", "combatfunctions", "dataclasses", "random"]], "combatfunctions": [".py", "\n\nimport random\n\ndef calculateInitiatives(init:int,a:int):\n\n initiatives=[]\n i=0\n while i <a:\n  initiatives.append(int(init /a *(a -i)))\n  i +=1\n  \n return initiatives\n \ndef throwHit(ws:int):\n\n a=random.randint(1,100)\n \n result=[]\n \n if ws >=a:\n  result=[\"Hit!\",str(a)]\n  return result\n else :\n  result=[checkFumble(a),str(a)]\n  return result\n  \ndef findHitLocation(hit:int):\n\n hitlocations=[15,35,55,80,90,100]\n hitlocationnames=[\"Head\",\"Right Arm\",\"Left Arm\",\"Body\",\"Left Leg\",\"Right Leg\"]\n \n temp=str(hit)\n \n if len(temp)==2:\n  hitlocation=int(temp[1]+temp[0])\n else :\n  hitlocation=int(temp+\"0\")\n  \n i=0\n \n while True :\n \n  if hitlocation <=hitlocations[i]:\n   return hitlocationnames[i]\n  else :\n   i +=1\n   \ndef findHitOutcome(damage,defence):\n if damage >defence:\n  return damage -defence\n else :\n  return 0\n  \ndef checkFumble(hit:int):\n\n temp=str(hit)\n \n if len(temp)==1:\n  return \"Miss!\"\n  \n if hit ==100:\n  return \"Fumble!\"\n  \n if temp[0]==temp[1]:\n  return \"Fumble!\"\n  \n return \"Miss!\"\n", ["random"]], "testi": [".py", "from dataclasses import dataclass\n\nimport random\nimport combatfunctions as cf\n\n@dataclass\nclass Opponent:\n name:str=\"dummy\"\n WS:int=50\n S:int=4\n T:int=3\n W:int=7\n I:int=40\n A:int=2\n \n def calculate_initiatives(self):\n \n  initiatives=[]\n  i=0\n  while i <self.A:\n   initiatives.append(int(self.I /self.A *(self.A -i)))\n   i +=1\n   \n  return initiatives\n  \n  \n  \n  \ndef ThrowHit():\n\n a=random.randint(1,100)\n print(f\"You threw {a}\")\n \n b=taistelija.WS\n \n \n \n if b >=a:\n  return a\n else :\n  return 100\n  \ndef FindHitLocation(hit:int):\n\n hitlocations=[15,35,55,80,90,100]\n hitlocationnames=[\"Head\",\"Right Arm\",\"Left Arm\",\"Body\",\"Left Leg\",\"Right Leg\"]\n \n temp=str(hit)\n \n if len(temp)==2:\n  hitlocation=int(temp[1]+temp[0])\n else :\n  hitlocation=int(temp+\"0\")\n  \n i=0\n \n while True :\n \n  if hitlocation <=hitlocations[i]:\n   return hitlocationnames[i]\n  else :\n   i +=1\n   \ndef CalculateInitiatives(init:int,a:int):\n\n initiatives=[]\n i=0\n while i <a:\n  initiatives.append(int(init /a *(a -i)))\n  i +=1\n  \n return initiatives\n \ndef ThrowDamage(s):\n a=random.randint(1,6)\n \n damagetotal=a+s\n \n return damagetotal\n \n \ndef FindHitOutcome(damage,toughness):\n\n if damage >toughness:\n  return damage -toughness\n else :\n  return 0\n  \ndef findHitOrder(hitorder_current,initiative_list,name):\n hitorder_temp=[]\n if len(hitorder_current)==0:\n  hitorder_temp=initiative_list\n else :\n  i=0\n  hitorder_temp=hitorder_current\n  hitorder_temp.append(0)\n  \n  while i <len(initiative_list):\n   h=0\n   \n   while initiative_list[i]<hitorder_temp[h]:\n   \n    h +=1\n    \n   hitorder_temp.insert(h,initiative_list[i])\n   \n   i +=1\n   \n if hitorder_temp[len(hitorder_temp)-1]==0:\n  hitorder_temp.pop()\n  \n return hitorder_temp\n \n \n \n \ndef combatRound(att_inits,def_inits,all_attacks):\n\n i=0\n ai=0\n di=0\n \n while i <all_attacks:\n \n  if t1_initiatives[ai]>t2_initiatives[di]:\n   print(f\"{taistelija.name} hits on initiative {t1_initiatives[ai]}\")\n   ai +=1\n   \n   \n   hit=66\n   message=\"Heitit \"+str(hit)\n   print(message)\n   \n   \n   if cf.checkFumble(hit)==\"Miss!\":\n    print(f\"Miss! with roll {hit}\")\n   else :\n    message=taistelija.name+\"fumbled with roll \"+str(hit)+\". Loose one attack.\"\n    print(message)\n    \n    if ai <len(t1_initiatives)-1:\n     ai +=1\n     all_attacks -=1\n     \n     \n  else :\n   print(f\"{taistelija2.name} hits on initiative {t2_initiatives[di]}\")\n   di +=1\n   \n  i +=1\n  \n return \"hy\u00f6kk\u00e4ykset tehty\"\n \n \ntaistelija=Opponent(name=\"Sankari\",S=5,T=4,I=70,A=3,W=10)\n\ntaistelija2=Opponent(name=\"Kultisti\",I=80,A=3,T=3,W=10)\n\nt1_initiatives=CalculateInitiatives(taistelija.I,taistelija.A)\nt2_initiatives=CalculateInitiatives(taistelija2.I,taistelija2.A)\n\nt1_initiatives.append(0)\nt2_initiatives.append(0)\n\n\nall_attacks=taistelija.A+taistelija2.A\n\n\n\n\n\n\n\n\n\n\nprint(combatRound(t1_initiatives,t2_initiatives,all_attacks))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresult=[]\nresult=cf.throwHit(taistelija.WS)\n\nprint(result[0])\nprint(result[1])\n\nmessage=\"Heitit \"+result[1]\nprint(message)\n\nif result[0]==\"Hit!\":\n print(f\"osuma heitolla {result[1]}\")\n \nif result[0]==\"Miss!\":\n print(f\"Huti heitolla {result[1]}\")\n \n \n \n \n \n", ["combatfunctions", "dataclasses", "random"]]}
__BRYTHON__.update_VFS(scripts)
